using UnityEngine;
using UnityEditor;
using System.Text;
using System.IO;

public class UIAutoBinderGenerator : EditorWindow
{
    private GameObject targetUI;
    private string className = "UI_AutoGenerated";
    private string outputPath = "Assets/Scripts/UI/";

    [MenuItem("Tools/UI Auto Binder Generator")]
    public static void ShowWindow()
    {
        GetWindow(typeof(UIAutoBinderGenerator), false, "UI Auto Binder");
    }

    private void OnGUI()
    {
        GUILayout.Label("ðŸŽ¨ UI Auto Binder Generator", EditorStyles.boldLabel);

        targetUI = (GameObject)EditorGUILayout.ObjectField("Target UI Root", targetUI, typeof(GameObject), true);
        className = EditorGUILayout.TextField("Class Name", className);
        outputPath = EditorGUILayout.TextField("Output Folder", outputPath);

        if (GUILayout.Button("âœ¨ Generate Script"))
        {
            if (targetUI == null)
            {
                EditorUtility.DisplayDialog("Error", "Please assign a target UI root GameObject.", "OK");
                return;
            }

            GenerateCode();
        }
    }

    private void GenerateCode()
    {
        StringBuilder sb = new();
        StringBuilder enumTexts = new();
        StringBuilder enumButtons = new();
        StringBuilder enumImages = new();
        StringBuilder enumObjects = new();
        StringBuilder fieldDecl = new();
        StringBuilder bindCalls = new();
        StringBuilder getCalls = new();

        enumTexts.AppendLine("    enum Texts");
        enumTexts.AppendLine("    {");

        enumButtons.AppendLine("    enum Buttons");
        enumButtons.AppendLine("    {");

        enumImages.AppendLine("    enum Images");
        enumImages.AppendLine("    {");

        enumObjects.AppendLine("    enum Objects");
        enumObjects.AppendLine("    {");

        foreach (Transform child in targetUI.GetComponentsInChildren<Transform>(true))
        {
            string name = child.name;

            if (name.StartsWith("Txt_"))
            {
                enumTexts.AppendLine($"        {name},");
                fieldDecl.AppendLine($"    TextMeshProUGUI {name};");
                getCalls.AppendLine($"        {name} = GetText((int)Texts.{name});");
            }
            else if (name.StartsWith("Btn_"))
            {
                enumButtons.AppendLine($"        {name},");
                fieldDecl.AppendLine($"    Button {name};");
                getCalls.AppendLine($"        {name} = GetButton((int)Buttons.{name});");
            }
            else if (name.StartsWith("Img_"))
            {
                enumImages.AppendLine($"        {name},");
                fieldDecl.AppendLine($"    Image {name};");
                getCalls.AppendLine($"        {name} = GetImage((int)Images.{name});");
            }
            else if (name.StartsWith("Obj_"))
            {
                enumObjects.AppendLine($"        {name},");
                fieldDecl.AppendLine($"    GameObject {name};");
                getCalls.AppendLine($"        {name} = GetObject((int)Objects.{name});");
            }
        }

        enumTexts.AppendLine("    }");
        enumButtons.AppendLine("    }");
        enumImages.AppendLine("    }");
        enumObjects.AppendLine("    }");

        // ---------- ì½”ë“œ ë¹Œë“œ ----------
        sb.AppendLine("using TMPro;");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using UnityEngine.UI;");
        sb.AppendLine();
        sb.AppendLine($"public class {className} : UI_Scene");
        sb.AppendLine("{");
        sb.AppendLine("    #region enum");
        sb.AppendLine(enumTexts.ToString());
        sb.AppendLine();
        sb.AppendLine(enumButtons.ToString());
        sb.AppendLine();
        sb.AppendLine(enumImages.ToString());
        sb.AppendLine();
        sb.AppendLine(enumObjects.ToString());
        sb.AppendLine("    #endregion");
        sb.AppendLine();
        sb.AppendLine(fieldDecl.ToString());
        sb.AppendLine();
        sb.AppendLine("    protected override void Awake()");
        sb.AppendLine("    {");
        sb.AppendLine("        base.Awake();");
        sb.AppendLine();
        sb.AppendLine("        BindTexts(typeof(Texts));");
        sb.AppendLine("        BindButtons(typeof(Buttons));");
        sb.AppendLine("        BindImages(typeof(Images));");
        sb.AppendLine("        BindObjects(typeof(Objects));");
        sb.AppendLine();
        sb.AppendLine(getCalls.ToString());
        sb.AppendLine("    }");
        sb.AppendLine("}");

        // ---------- ì €ìž¥ ----------
        if (!Directory.Exists(outputPath))
            Directory.CreateDirectory(outputPath);

        string filePath = Path.Combine(outputPath, $"{className}.cs");
        File.WriteAllText(filePath, sb.ToString(), Encoding.UTF8);
        AssetDatabase.Refresh();

        EditorUtility.DisplayDialog("âœ… Success", $"Script generated at:\n{filePath}", "OK");
    }
}
